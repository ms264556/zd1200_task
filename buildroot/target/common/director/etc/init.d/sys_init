#!/bin/sh

# NOTE
# 
# sys_init should prepare the file system to a ready state
# i.e. after sys_init, it can be running for all platforms
# 


_sys_start()
{
mount -o remount,rw /
mount -a
#
#insmod v54_bsp
#

#start led, blinking red
/bin/led.sh red blink

#
# mount datafs
data_num=99
_grep_datafs()
{
    while read pn sz esz name ; do
        case "${name}" in
        '"datafs"')  data_num=${pn#mtd}
             data_num=${data_num%:}
             break ;;
        *) ;;
        esac
    done < /proc/mtd
}
_grep_datafs
if [ ${data_num} -lt 20 ]; then
    mount -t jffs2 /dev/mtdblock${data_num} /writable
	if [ ! -d /writable/etc ]; then
		mkdir /writable/etc
	fi
else
    echo "[sys_init] Cannot find datafs partition" >&2
    echo "[sys_init] use tmpfs for datafs -- FIXME" >&2
    mount -t tmpfs /writable
    mkdir -p /writable/etc
fi

#mount stg0 and apimg
_grep_mtd()
{
    data_num=99
    while read pn sz esz name ; do
        case "${name}" in
        "$1")  data_num=${pn#mtd}
             data_num=${data_num%:}
             break ;;
        *) ;;
        esac
    done < /proc/mtd
    if [ ${data_num} -lt 20 ]; then
	if [ ! -d "$2" ] ; then
		mkdir "$2"
	fi
	mount -t jffs2 /dev/mtdblock${data_num} "$2"
    else
	echo "[sys_init] Cannot find $1 partition" >&2
	echo "[sys_init] use tmpfs for $2 -- FIXME"
	mkdir -p "$2"
	mount -t tmpfs "$2"
    fi
}
_grep_mtd '"stg0"' /writable/etc/airespider-images
# mount supportxt/ as tmpfs
# this is a tricky arrangement to satisfy:
# - tftp cannot follow links to a different rooted directory
#   (i.e. create a /path/to/tftproot/ ->/tmp/supportxt/ won't work)
# - it's preferred to use RAM to store the data rather than flash
#   (as periodically supportxt retrieval from AP is implemented, this is a must)
mkdir -p /writable/etc/airespider-images/firmwares/supportxt
mount -t tmpfs /writable/etc/airespider-images/firmwares/supportxt

# change kernel parameters
sysctl -w net.unix.max_dgram_qlen=200
sysctl -w net.core.rmem_default=262144
sysctl -w net.core.rmem_max=262144

#

#
# set up /tmp directories
if [ ! -d /tmp/non_persist ]; then
    mkdir /tmp/non_persist
fi
#
# fix links for /var
vardirs="run log spool lock ftp"
for d in ${vardirs} ;do
#	rm -f  /var/${d}
	mkdir -p /tmp/var/${d}
# symlink for these are already in target_skeleton
#	ln -fs /tmp/var/${d} /var/${d}
done

# urandom
/etc/init.d/urandom start

if [ -d /proc/v54bsp ] ; then
    # see if reset to factory should be performed
    # /proc/v54bsp/factory should be non-zero
    restore_factory="no"
    
    # /proc/v54bsp/factory will be set to 0 if the restore-factory button is triggered
    # or set by scripts
    factory=`cat /proc/v54bsp/factory`
    if [ "$factory" != "0" ] ; then
        restore_factory="yes"
    fi
   
    # because of #5056, we cannot trust the /proc/v54bsp/factory for certain versions
    fromver=`cat /etc/airespider-images/upgraded.fromver 2>/dev/null`
    BADVERS="2.0.0.0 2.0.1.0 2.0.1.1 3.0.0.0 3.0.1.0 3.0.2.0 3.0.3.0"
    if [ "$fromver" != "" ] ; then
         if [ "`echo $BADVERS | grep $fromver`" != "" ] ; then
             restore_factory="no"
         fi
    fi
    
    if [ "${restore_factory}" = "yes" ] ; then
       echo -n "[CONFIG] Restore to factory default ... "
       sh /bin/sys_wrapper.sh restore-default 2> /dev/null
       echo "Done"
    fi
    # always reset the flag
    echo -n 0 > /proc/v54bsp/factory
else
    # BSP doesn't exists. Platform porting needed
    echo "[sys_init] /proc/v54bsp/ doesn't exist"
    echo "[sys_init] fake /bin/MODEL and /bin/SERIAL -- FIXME"
    rm -f /bin/MODEL /bin/SERIAL
    echo "ZD-3000" > /bin/MODEL
    echo "SNFAKE3000" > /bin/SERIAL
    
fi

#mount -o remount,ro /
mount
}

_sys_stop()
{
	mount -o remount,rw /
	/etc/init.d/urandom stop
}


case "$1" in
start|"")
	_sys_start ;;
stop)	_sys_stop ;;
*)	;;
esac
