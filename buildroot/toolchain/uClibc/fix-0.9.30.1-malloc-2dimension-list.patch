diff --git a/include/malloc.h b/include/malloc.h
index 12834a5..de595b1 100644
--- a/include/malloc.h
+++ b/include/malloc.h
@@ -130,6 +130,16 @@ extern __malloc_ptr_t valloc __MALLOC_P ((size_t __size)) __attribute_malloc__;
 
 #ifdef __MALLOC_STANDARD__
 
+typedef struct _bininfo {
+    int nblocks;
+    int list_len;
+    int avail;
+    int min_chunk_size;
+    int min_chunk_index;
+    int max_chunk_size;
+    int max_chunk_index;
+}bininfo;
+
 /* SVID2/XPG mallinfo structure */
 struct mallinfo {
   int arena;    /* total space allocated from system */
@@ -142,6 +152,9 @@ struct mallinfo {
   int uordblks; /* total allocated space */
   int fordblks; /* total non-inuse space */
   int keepcost; /* top-most, releasable (via malloc_trim) space */
+  bininfo bin[97];
+  unsigned int max_resort_loop_cnt_1;
+  unsigned long long max_resort_loop_cnt_2;
 };
 
 /* Returns a copy of the updated current mallinfo. */
@@ -154,6 +167,7 @@ extern int malloc_trim(size_t pad);
 #include <stdio.h>
 /* Prints brief summary statistics to the specified file.
  * Writes to stderr if file is NULL. */
+extern void malloc_output(char *tags);
 extern void malloc_stats(FILE *file);
 
 /* SVID2/XPG mallopt options */
diff --git a/libc/stdlib/malloc-standard/mallinfo.c b/libc/stdlib/malloc-standard/mallinfo.c
index 1833101..b65cdca 100644
--- a/libc/stdlib/malloc-standard/mallinfo.c
+++ b/libc/stdlib/malloc-standard/mallinfo.c
@@ -27,10 +27,12 @@ struct mallinfo mallinfo(void)
     unsigned int i;
     mbinptr b;
     mchunkptr p;
+    mchunkptr pp;
     size_t avail;
     size_t fastavail;
     int nblocks;
     int nfastblocks;
+    int chunk_index;
 
     __MALLOC_LOCK;
     av = get_malloc_state();
@@ -61,9 +63,36 @@ struct mallinfo mallinfo(void)
     /* traverse regular bins */
     for (i = 1; i < NBINS; ++i) {
 	b = bin_at(av, i);
+
+    /* record detail for non-empty bins */
+    chunk_index = 1;
+    mi.bin[i].nblocks = 0;
+    mi.bin[i].list_len = 0;
+    mi.bin[i].avail = 0;
+    mi.bin[i].min_chunk_size = chunksize(last(b));
+    mi.bin[i].min_chunk_index = chunk_index;
+    mi.bin[i].max_chunk_size = chunksize(last(b));
+    mi.bin[i].max_chunk_index = chunk_index;
+    
 	for (p = last(b); p != b; p = p->bk) {
-	    ++nblocks;
-	    avail += chunksize(p);
+        mi.bin[i].list_len++;
+        /* chunks of the same size is put into a column list */
+        for (pp = p; pp != NULL; pp = pp->next_child) {
+            mi.bin[i].nblocks++;
+            mi.bin[i].avail += chunksize(pp);
+            if (mi.bin[i].min_chunk_size > chunksize(pp)) {
+                mi.bin[i].min_chunk_size = chunksize(pp);
+                mi.bin[i].min_chunk_index = chunk_index;
+            }
+            if (mi.bin[i].max_chunk_size < chunksize(pp)) {
+                mi.bin[i].max_chunk_size = chunksize(pp);
+                mi.bin[i].max_chunk_index = chunk_index;
+            }
+
+            chunk_index++;
+        	   ++nblocks;
+        	   avail += chunksize(pp);
+        }
 	}
     }
 
@@ -77,11 +106,153 @@ struct mallinfo mallinfo(void)
     mi.fsmblks = fastavail;
     mi.keepcost = chunksize(av->top);
     mi.usmblks = av->max_total_mem;
+
     __MALLOC_UNLOCK;
     return mi;
 }
 libc_hidden_def(mallinfo)
 
+
+
+void malloc_output(char *tags)
+{
+    mstate av;
+    struct mallinfo mi;
+    unsigned int i;
+    mbinptr b;
+    mchunkptr p;
+    mchunkptr pp;
+    size_t avail;
+    size_t fastavail;
+    int nblocks;
+    int nfastblocks;
+    int chunk_index;
+    FILE* fp;
+    int same_size_chunk_num;
+    time_t start;
+
+    fp = fopen("/tmp/malloc_out.log", "a+");
+    if (!fp) {
+        return;
+    }
+
+
+    __MALLOC_LOCK;
+    av = get_malloc_state();
+    /* Ensure initialization */
+    if (av->top == 0)  {
+	__malloc_consolidate(av);
+    }
+
+    check_malloc_state();
+
+    time(&start);
+
+    fprintf(fp, "========== malloc out %s, , start from %s", tags, ctime(&start));
+
+
+    /* Account for top */
+    avail = chunksize(av->top);
+    nblocks = 1;  /* top always exists */
+
+    /* traverse fastbins */
+    nfastblocks = 0;
+    fastavail = 0;
+
+    for (i = 0; i < NFASTBINS; ++i) {
+	for (p = av->fastbins[i]; p != 0; p = p->fd) {
+	    ++nfastblocks;
+	    fastavail += chunksize(p);
+	}
+    }
+
+    avail += fastavail;
+
+
+
+    /* traverse regular bins */
+    for (i = 1; i < NBINS; ++i) {
+        b = bin_at(av, i);
+        
+        /* record detail for non-empty bins */
+        chunk_index = 1;
+        mi.bin[i].nblocks = 0;
+        mi.bin[i].avail = 0;
+        mi.bin[i].min_chunk_size = chunksize(last(b));
+        mi.bin[i].min_chunk_index = chunk_index;
+        mi.bin[i].max_chunk_size = chunksize(last(b));
+        mi.bin[i].max_chunk_index = chunk_index;
+        
+        for (p = last(b); p != b; p = p->bk) {
+            same_size_chunk_num = 0;
+            /* chunks of the same size is put into a column list */
+            for (pp = p; pp != NULL; pp = pp->next_child) {
+                mi.bin[i].nblocks++;
+                
+                mi.bin[i].avail += chunksize(pp);
+                if (mi.bin[i].min_chunk_size > chunksize(pp)) {
+                    mi.bin[i].min_chunk_size = chunksize(pp);
+                    mi.bin[i].min_chunk_index = chunk_index;
+                }
+                if (mi.bin[i].max_chunk_size < chunksize(pp)) {
+                    mi.bin[i].max_chunk_size = chunksize(pp);
+                    mi.bin[i].max_chunk_index = chunk_index;
+                }
+        
+                chunk_index++;
+                ++nblocks;
+                avail += chunksize(pp);
+                same_size_chunk_num++;
+            }
+    
+            if ((same_size_chunk_num != 0) && (!in_smallbin_range(chunksize(p)))) {
+                fprintf(fp, "          bin[%2d]: chunks=%6d, chunksize=%7d, size=%7d\n", i, same_size_chunk_num, chunksize(p), p->size);
+            }
+        }
+        
+        if (mi.bin[i].nblocks > 0) {
+            fprintf(fp, "    bin[%2d]: chunks=%6d, alloc=%10u, min_chunk[%d]=%10u, max_chunk[%d]=%10u\n", i, 
+                mi.bin[i].nblocks,
+                mi.bin[i].avail,
+                mi.bin[i].min_chunk_index,
+                mi.bin[i].min_chunk_size,
+                mi.bin[i].max_chunk_index,
+                mi.bin[i].max_chunk_size);
+        }
+    }
+
+    mi.smblks = nfastblocks;
+    mi.ordblks = nblocks;
+    mi.fordblks = avail;
+    mi.uordblks = av->sbrked_mem - avail;
+    mi.arena = av->sbrked_mem;
+    mi.hblks = av->n_mmaps;
+    mi.hblkhd = av->mmapped_mem;
+    mi.fsmblks = fastavail;
+    mi.keepcost = chunksize(av->top);
+    mi.usmblks = av->max_total_mem;
+
+
+    fprintf(fp, "total alloc = %10u, inuse = %10u, freed = %10d, alloc mmap = %10d, free chunks = %10d, fastbin = %10d, free fastbin = %10d\n", 
+        (unsigned int)(mi.arena + mi.hblkhd),
+        (unsigned int)(mi.uordblks + mi.hblkhd),
+        mi.fordblks,
+        mi.hblkhd,
+        mi.ordblks,
+        mi.smblks,
+        mi.fsmblks);
+    
+    fclose(fp);
+
+
+
+    __MALLOC_UNLOCK;
+    return mi;
+}
+
+
+
+
 void malloc_stats(FILE *file)
 {
     struct mallinfo mi;
diff --git a/libc/stdlib/malloc-standard/malloc.c b/libc/stdlib/malloc-standard/malloc.c
index 3253ebd..3b9e683 100644
--- a/libc/stdlib/malloc-standard/malloc.c
+++ b/libc/stdlib/malloc-standard/malloc.c
@@ -822,8 +822,11 @@ void* malloc(size_t bytes)
 
     mchunkptr       fwd;              /* misc temp for linking */
     mchunkptr       bck;              /* misc temp for linking */
+    mchunkptr       same_size_chunk;
     void *          sysmem;
     void *          retval;
+    unsigned int max_resort_loop_cnt_1 = 0;
+    unsigned long long max_resort_loop_cnt_2 = 0;
 
 #if !defined(__MALLOC_GLIBC_COMPAT__)
     if (!bytes) {
@@ -920,6 +923,7 @@ void* malloc(size_t bytes)
 	bck = victim->bk;
 	size = chunksize(victim);
 
+    max_resort_loop_cnt_1 ++;
 	/* If a small request, try to use last remainder if it is the
 	   only chunk in unsorted bin.  This helps promote locality for
 	   runs of consecutive small requests. This is the only
@@ -962,11 +966,18 @@ void* malloc(size_t bytes)
 	}
 
 	/* place chunk in bin */
-
 	if (in_smallbin_range(size)) {
 	    victim_index = smallbin_index(size);
 	    bck = bin_at(av, victim_index);
 	    fwd = bck->fd;
+        
+        mark_bin(av, victim_index);
+        victim->bk = bck;
+        victim->fd = fwd;
+        fwd->bk = victim;
+        bck->fd = victim;
+        victim->next_child = NULL;
+        victim->prev_child = NULL;
 	}
 	else {
 	    victim_index = __malloc_largebin_index(size);
@@ -974,28 +985,77 @@ void* malloc(size_t bytes)
 	    fwd = bck->fd;
 
 	    if (fwd != bck) {
-		/* if smaller than smallest, place first */
-		if ((unsigned long)(size) < (unsigned long)(bck->bk->size)) {
-		    fwd = bck;
-		    bck = bck->bk;
-		}
-		else if ((unsigned long)(size) >=
-			(unsigned long)(FIRST_SORTED_BIN_SIZE)) {
-
-		    /* maintain large bins in sorted order */
-		    size |= PREV_INUSE; /* Or with inuse bit to speed comparisons */
-		    while ((unsigned long)(size) < (unsigned long)(fwd->size))
-			fwd = fwd->fd;
-		    bck = fwd->bk;
-		}
+        		/* if smaller than smallest, place first */
+        		if ((unsigned long)(size) < (unsigned long)(bck->bk->size)) {
+        		    fwd = bck;
+        		    bck = bck->bk;
+        		}
+        		else if ((unsigned long)(size) >=
+        			(unsigned long)(FIRST_SORTED_BIN_SIZE)) {
+
+        		    /* maintain large bins in sorted order */
+        		    size |= PREV_INUSE; /* Or with inuse bit to speed comparisons */
+        		    while ((unsigned long)(size & ~(SIZE_BITS)) < (unsigned long)(fwd->size & ~(SIZE_BITS))) {
+        			    fwd = fwd->fd;
+        		    }
+        		    bck = fwd->bk;
+        		}
+
+            mark_bin(av, victim_index);
+            if ((unsigned long)(size & ~(SIZE_BITS)) == (unsigned long)(fwd->size & ~(SIZE_BITS))) {
+                /* insert victim into the same-size-chunk column list */
+                same_size_chunk = fwd;
+                fwd = fwd->fd;
+            
+                victim->bk = bck;
+                victim->fd = fwd;
+                fwd->bk = victim;
+                bck->fd = victim;
+            
+                same_size_chunk->bk = NULL;
+                same_size_chunk->fd = NULL;
+                victim->next_child = same_size_chunk;
+                same_size_chunk->prev_child = victim;
+            
+                victim->prev_child = NULL;
+            }
+            else if ((unsigned long)(size & ~(SIZE_BITS)) == (unsigned long)(bck->size & ~(SIZE_BITS))) {
+                /* insert victim into the same-size-chunk column list */
+                same_size_chunk = bck;
+                bck = bck->bk;
+            
+                victim->bk = bck;
+                victim->fd = fwd;
+                fwd->bk = victim;
+                bck->fd = victim;
+            
+                same_size_chunk->bk = NULL;
+                same_size_chunk->fd = NULL;
+                victim->next_child = same_size_chunk;
+                same_size_chunk->prev_child = victim;
+            
+                victim->prev_child = NULL;
+            }
+            else {
+                victim->bk = bck;
+                victim->fd = fwd;
+                fwd->bk = victim;
+                bck->fd = victim;
+                victim->next_child = NULL;
+                victim->prev_child = NULL;
+            }
 	    }
+        else {
+            mark_bin(av, victim_index);
+            victim->bk = bck;
+            victim->fd = fwd;
+            fwd->bk = victim;
+            bck->fd = victim;
+            victim->next_child = NULL;
+            victim->prev_child = NULL;
+        }
 	}
 
-	mark_bin(av, victim_index);
-	victim->bk = bck;
-	victim->fd = fwd;
-	fwd->bk = victim;
-	bck->fd = victim;
     }
 
     /*
@@ -1094,9 +1154,11 @@ void* malloc(size_t bytes)
 	    remainder_size = size - nb;
 
 	    /* unlink */
-	    bck = victim->bk;
+	    /*bck = victim->bk;
 	    bin->bk = bck;
-	    bck->fd = bin;
+	    bck->fd = bin;*/
+	    unlink(victim, bck, fwd);
+
 
 	    /* Exhaust */
 	    if (remainder_size < MINSIZE) {
diff --git a/libc/stdlib/malloc-standard/malloc.h b/libc/stdlib/malloc-standard/malloc.h
index e0f3658..fd5c0a6 100644
--- a/libc/stdlib/malloc-standard/malloc.h
+++ b/libc/stdlib/malloc-standard/malloc.h
@@ -381,6 +381,8 @@ struct malloc_chunk {
 
   struct malloc_chunk* fd;         /* double links -- used only if free. */
   struct malloc_chunk* bk;
+  struct malloc_chunk* next_child;  /* double links -- for column of same size chunks. */
+  struct malloc_chunk* prev_child;
 };
 
 
@@ -590,7 +592,11 @@ nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 #define set_head(p, s)       ((p)->size = (s))
 
 /* Set size at footer (only when chunk is not in use) */
-#define set_foot(p, s)       (((mchunkptr)((char*)(p) + (s)))->prev_size = (s))
+#define set_foot(p, s) {                                   \
+    (((mchunkptr)((char*)(p) + (s)))->prev_size = (s));    \
+    p->next_child = NULL;                                  \
+    p->prev_child = NULL;                                  \
+}
 
 
 /* -------------------- Internal data structures -------------------- */
@@ -647,10 +653,31 @@ typedef struct malloc_chunk* mbinptr;
 #define unlink(P, BK, FD) {                                            \
   FD = P->fd;                                                          \
   BK = P->bk;                                                          \
-  if (FD->bk != P || BK->fd != P)                                      \
-      abort();                                                         \
-  FD->bk = BK;                                                         \
-  BK->fd = FD;                                                         \
+  /* only one node in this column, remove this column */               \
+  if ((P->next_child == NULL) && (P->prev_child == NULL)) {            \
+      FD->bk = BK;                                                     \
+      BK->fd = FD;                                                     \
+  }                                                                    \
+  else {                                                               \
+    /* this is header node, make next child to be header first */      \
+    if (P->prev_child == NULL) {                                       \
+        FD->bk = P->next_child;                                        \
+        BK->fd = P->next_child;                                        \
+        P->next_child->bk = BK;                                        \
+        P->next_child->fd = FD;                                        \
+        P->fd = NULL;                                                  \
+        P->bk = NULL;                                                  \
+    }                                                                  \
+    /* unlink node from the column */                                  \
+    FD = P->next_child;                                                \
+    BK = P->prev_child;                                                \
+    if (FD)                                                            \
+        FD->prev_child = BK;                                           \
+    if (BK)                                                            \
+        BK->next_child = FD;                                           \
+    P->next_child = NULL;                                              \
+    P->prev_child = NULL;                                              \
+  }                                                                    \
 }
 
 /*
