--- uClibc-0.9.30.1/libc/inet/resolv.c	2008-11-02 08:25:33.000000000 +0800
+++ uClibc-0.9.30.1_new/libc/inet/resolv.c	2013-09-10 10:26:37.000000000 +0800
@@ -2109,8 +2109,10 @@
 		__set_errno(0);         /* to check for missing /etc/hosts. */
 		i = __get_hosts_byname_r(name, AF_INET, result_buf,
 				buf, buflen, result, h_errnop);
-		if (i == 0)
+		if (i == NETDB_SUCCESS) {
+			__set_errno(old_errno);
 			return i;
+		}
 		switch (*h_errnop) {
 			case HOST_NOT_FOUND:
 			case NO_ADDRESS:
@@ -2250,11 +2252,11 @@
 
 #ifdef L_gethostbyname2_r
 
-int gethostbyname2_r(const char *name, int family,
-					 struct hostent * result_buf,
-					 char * buf, size_t buflen,
-					 struct hostent ** result,
-					 int * h_errnop)
+int gethostbyname2_r(const char * name, int family,
+					struct hostent * result_buf,
+					char * buf, size_t buflen,
+					struct hostent ** result,
+					int * h_errnop)
 {
 #ifndef __UCLIBC_HAS_IPV6__
 	return family == (AF_INET)
@@ -2263,10 +2265,10 @@
 #else /* __UCLIBC_HAS_IPV6__ */
 	struct in6_addr *in;
 	struct in6_addr **addr_list;
+	char **alias;
 	unsigned char *packet;
 	struct resolv_answer a;
 	int i;
-	int nest = 0;
 	int __nameserversXX;
 	char ** __nameserverXX;
 	int wrong_af = 0;
@@ -2277,7 +2279,6 @@
 	if (family != AF_INET6)
 		return EINVAL;
 
-	__open_nameservers();
 	*result = NULL;
 	if (!name)
 		return EINVAL;
@@ -2290,7 +2291,7 @@
 		i = __get_hosts_byname_r(name, family, result_buf,
 				buf, buflen, result, h_errnop);
 		if (i == NETDB_SUCCESS) {
-//FIXME: restore errno?
+			__set_errno(old_errno);
 			return i;
 		}
 		switch (*h_errnop) {
@@ -2311,6 +2312,15 @@
 
 	DPRINTF("Nothing found in /etc/hosts\n");
 
+	/* make sure user char * is aligned */
+	i = ALIGN_BUFFER_OFFSET(buf);
+	if (unlikely(i)) {
+		if (buflen < i)
+			return ERANGE;
+		buf += i;
+		buflen -= i;
+	}
+
 	*h_errnop = NETDB_INTERNAL;
 	if (buflen < sizeof(*in))
 		return ERANGE;
@@ -2327,16 +2337,26 @@
 	addr_list[0] = in;
 	addr_list[1] = 0;
 
+	if (buflen < sizeof(char *)*ALIAS_DIM)
+		return ERANGE;
+	alias = (char **)buf;
+	buf += sizeof(char **)*ALIAS_DIM;
+	buflen -= sizeof(char **)*ALIAS_DIM;
+
 	if (buflen < 256)
 		return ERANGE;
 	strncpy(buf, name, buflen);
 
+	alias[0] = buf;
+	alias[1] = NULL;
+
 	/* First check if this is already an address */
 	if (inet_pton(AF_INET6, name, in)) {
 		result_buf->h_name = buf;
 		result_buf->h_addrtype = AF_INET6;
 		result_buf->h_length = sizeof(*in);
 		result_buf->h_addr_list = (char **) addr_list;
+		result_buf->h_aliases = alias;
 		*result = result_buf;
 		*h_errnop = NETDB_SUCCESS;
 		return NETDB_SUCCESS;
@@ -2350,45 +2370,56 @@
 		return TRY_AGAIN;
 	}
 
-	memset(&a, '\0', sizeof(a));
+	__open_nameservers();
 
-	for (;;) {
+       for (;;) {
 		__UCLIBC_MUTEX_LOCK(__resolv_lock);
 		__nameserversXX = __nameservers;
 		__nameserverXX = __nameserver;
 		__UCLIBC_MUTEX_UNLOCK(__resolv_lock);
-
-		i = __dns_lookup(buf, T_AAAA, __nameserversXX, __nameserverXX, &packet, &a);
+		a.buf = buf;
+		a.buflen = buflen;
+		a.add_count = 0;
+		i = __dns_lookup(name, T_AAAA, __nameserversXX, __nameserverXX, &packet, &a);
 
 		if (i < 0) {
 			*h_errnop = HOST_NOT_FOUND;
+			DPRINTF("__dns_lookup\n");
 			return TRY_AGAIN;
 		}
 
-		strncpy(buf, a.dotted, buflen);
-		free(a.dotted);
-
-		if (a.atype == T_CNAME) {		/* CNAME */
-			DPRINTF("Got a CNAME in gethostbyname()\n");
-			i = __decode_dotted(packet, a.rdoffset, buf, buflen);
+		if ((a.rdlength + sizeof(struct in6_addr*)) * a.add_count + 256 > buflen) {
+			free(a.dotted);
 			free(packet);
+			*h_errnop = NETDB_INTERNAL;
+			DPRINTF("buffer too small for all addresses\n");
+			return ERANGE;
+		}
 
-			if (i < 0) {
-				*h_errnop = NO_RECOVERY;
-				return -1;
-			}
-			if (++nest > MAX_RECURSE) {
-				*h_errnop = NO_RECOVERY;
-				return -1;
-			}
-			continue;
+		if (a.add_count > 0) {
+			memmove(buf - sizeof(struct in6_addr*)*2, buf, a.add_count * a.rdlength);
+			addr_list = (struct in6_addr**)(buf + a.add_count * a.rdlength);
+			addr_list[0] = in;
+			for (i = a.add_count - 1; i >= 0; --i)
+				addr_list[i+1] = (struct in6_addr*)(buf - sizeof(struct in6_addr*)*2 + a.rdlength * i);
+			addr_list[a.add_count + 1] = 0;
+			buflen -= (((char*)&(addr_list[a.add_count + 2])) - buf);
+			buf = (char*)&addr_list[a.add_count + 2];
 		}
-		if (a.atype == T_AAAA) {	/* ADDRESS */
+
+		strncpy(buf, a.dotted, buflen);
+		free(a.dotted);
+
+		if (a.atype == T_AAAA) { /* ADDRESS */
 			memcpy(in, a.rdata, sizeof(*in));
 			result_buf->h_name = buf;
 			result_buf->h_addrtype = AF_INET6;
 			result_buf->h_length = sizeof(*in);
 			result_buf->h_addr_list = (char **) addr_list;
+#ifdef __UCLIBC_MJN3_ONLY__
+#warning TODO -- generate the full list
+#endif
+			result_buf->h_aliases = alias; /* TODO: generate the full list */
 			free(packet);
 			break;
 		}
