diff -Nurp grub-0.97/stage2/builtins.c grub-0.97-led/stage2/builtins.c
--- grub-0.97/stage2/builtins.c	2010-12-31 14:24:46.702319011 +0800
+++ grub-0.97-led/stage2/builtins.c	2011-01-25 14:20:43.218471351 +0800
@@ -27,7 +27,6 @@
 #include <shared.h>
 #include <filesys.h>
 #include <term.h>
-
 #ifdef SUPPORT_NETBOOT
 # define GRUB	1
 # include <etherboot.h>
@@ -3721,6 +3720,7 @@ static inline unsigned type in##bwl(int 
 }
 BUILDIO(b,b,char)
 
+
 //=======================================================
 //Logic Device
 #define LDN8    0x08 //WDT
@@ -3777,6 +3777,204 @@ BUILDIO(b,b,char)
 
 #define LED_DEVICE              LDN9
 
+//timer definition for zd5000, copy from netboot/timer.h
+/* Ports for the 8254 timer chip */
+#define TIMER2_PORT     0x42
+#define TIMER_MODE_PORT 0x43
+
+/* Meaning of the mode bits */
+#define TIMER0_SEL      0x00
+#define TIMER1_SEL      0x40
+#define TIMER2_SEL      0x80
+#define READBACK_SEL    0xC0
+
+#define LATCH_COUNT     0x00
+#define LOBYTE_ACCESS   0x10
+#define HIBYTE_ACCESS   0x20
+#define WORD_ACCESS     0x30
+
+#define MODE0           0x00
+#define MODE1           0x02
+#define MODE2           0x04
+#define MODE3           0x06
+#define MODE4           0x08
+#define MODE5           0x0A
+
+#define BINARY_COUNT    0x00
+#define BCD_COUNT       0x01
+
+/* Meaning of the port bits */
+#define PPCB_T2OUT      0x20    /* Bit 5 */
+#define PPCB_SPKR       0x02    /* Bit 1 */
+#define PPCB_T2GATE     0x01    /* Bit 0 */
+
+/* Timers tick over at this rate */
+#define TICKS_PER_MS    1193
+
+/* Parallel Peripheral Controller Port B */
+#define PPC_PORTB       0x61
+
+inline void waiton_timer2(unsigned int ticks)
+{
+    load_timer2(ticks);
+    while ((inb(PPC_PORTB) & PPCB_T2OUT) == 0)
+                ;
+}
+
+void load_timer2(unsigned int ticks)
+{
+    /* Set up the timer gate, turn off the speaker */
+    outb((inb(PPC_PORTB) & ~PPCB_SPKR) | PPCB_T2GATE, PPC_PORTB);
+    outb(TIMER2_SEL|WORD_ACCESS|MODE0|BINARY_COUNT, TIMER_MODE_PORT);
+    outb(ticks & 0xFF, TIMER2_PORT);
+    outb(ticks >> 8, TIMER2_PORT);
+}
+#define    udelay(n)    waiton_timer2(((n)*TICKS_PER_MS)/1000)
+//end of timer definition
+
+//zd5000 LED definition
+static unsigned int  kcsBaseAddress  = 0xca2; /* for ia32 KCS */
+static unsigned int   kcs_inc = 1;     /*register spacing*/
+#define _INB(addr) inb(addr)
+#define _OUTB(data, addr) outb(data,addr)
+#define STATUS_REQ 0x60
+#define WR_START   0x61
+#define WR_END     0x62
+#define READ_BYTE  0x68
+#define COMMAND_REG  (kcsBaseAddress+kcs_inc)
+#define STATUS_REG   (kcsBaseAddress+kcs_inc)
+#define DATA_IN_REG  (kcsBaseAddress)
+#define DATA_OUT_REG (kcsBaseAddress)
+#define DATA_1 0x18
+#define DATA_2 0x52
+#define DATA_3 0x3
+#define DATA_4 0x40
+#define DATA_5 0x1
+#define DATA_CMD 0xf7 /* n1 */
+
+static int  max_kcs_loop = 30000;  /*means 300ms*/
+static int  peak_loops = 0;
+
+static inline int get_write_state(void)
+{
+    if ((_INB(STATUS_REG) >> 6) != 0x02)
+        return -1;
+    return 0;
+}
+static inline void clear_OBF(void)
+{
+    _INB(DATA_IN_REG);
+}
+static int  wait_for_IBF_clear(void)
+{
+    int i = 0;
+    while ((_INB(STATUS_REG) & 0x02) == 0x02) {
+        if (i > 0 && (i % 100) == 0) udelay(1000); /*sleep for 1 msec*/
+        if (i > max_kcs_loop){
+            return -1;
+            // break;
+        }
+        i++;
+    }
+    if (i > peak_loops) peak_loops = i;
+    return 0;
+}
+static int  wait_for_OBF_set(void)
+{
+    int i = 0;
+    while ((_INB(STATUS_REG) & 0x01) == 0x00) {
+        if (i > 0 && (i % 100) == 0) udelay(1000); /*sleep for 1 msec*/
+        if (i > max_kcs_loop)
+        {
+            return -1;
+            // break;
+        }
+        i++;
+    }
+    if (i > peak_loops) peak_loops = i;
+    return 0;
+}
+static inline int get_read_state(void)
+{
+    if ((_INB(STATUS_REG) >> 6) != 0x01)
+        return -1;
+    return 0;
+}
+static inline int get_idle_state(void)
+{
+    if ((_INB(STATUS_REG) >> 6) != 0x00)
+        return -1;
+    return 0;
+}
+//end of zd5000 LED definition
+static int T5520UR_setled()
+{
+    int rv;
+    rv = wait_for_IBF_clear();
+    clear_OBF();
+    if (rv != 0) return -1;
+
+    //start writing
+    _OUTB(WR_START,COMMAND_REG);
+    rv = wait_for_IBF_clear();
+    if (get_write_state() != 0)
+        return -1;
+    clear_OBF();
+    if (rv != 0)
+        return -1;
+
+    _OUTB(DATA_1,DATA_OUT_REG);
+    rv = wait_for_IBF_clear();
+    if (get_write_state() != 0)
+        return -1;
+    clear_OBF();
+
+    _OUTB(DATA_2,DATA_OUT_REG);
+    wait_for_IBF_clear();
+    if (get_write_state() != 0)
+        return -1;
+    clear_OBF();
+
+    _OUTB(DATA_3,DATA_OUT_REG);
+    wait_for_IBF_clear();
+    if (get_write_state() != 0)
+        return -1;
+    clear_OBF();
+
+    _OUTB(DATA_4,DATA_OUT_REG);
+    wait_for_IBF_clear();
+    if (get_write_state() != 0)
+        return -1;
+    clear_OBF();
+
+    _OUTB(DATA_5,DATA_OUT_REG);
+    wait_for_IBF_clear();
+    if (get_write_state() != 0)
+        return -1;
+    clear_OBF();
+
+    _OUTB(WR_END,COMMAND_REG);
+    wait_for_IBF_clear();
+    if (get_write_state() != 0)
+        return -1;
+    clear_OBF();
+
+    _OUTB(DATA_CMD,DATA_OUT_REG);
+
+    /********************************** WRITE PHASE OVER ***********************/
+
+    /********************************** READ PHASE START ***********************/
+    wait_for_IBF_clear();
+    if (get_read_state() != 0) {
+        return -1;
+    } else {
+        wait_for_OBF_set();
+        _OUTB(READ_BYTE,DATA_IN_REG);
+    }
+
+    return 0;
+}
+
 static inline int
 set_led(unsigned char pin, int state)
 {
@@ -3862,6 +4060,7 @@ set_led(unsigned char pin, int state)
   //Close
   W627_CLOSE_PORT();
 
+  T5520UR_setled();
   return 0;
 }
 
