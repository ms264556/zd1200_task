diff -rupN lldpd-0.7.1/src/daemon/lldpd.c lldpd-0.7.1-new/src/daemon/lldpd.c
--- lldpd-0.7.1/src/daemon/lldpd.c	2013-03-27 16:21:13.000000000 +0800
+++ lldpd-0.7.1-new/src/daemon/lldpd.c	2013-03-27 16:19:45.000000000 +0800
@@ -892,6 +892,8 @@ lldpd_update_localchassis(struct lldpd *
 	char *hp;
 #if defined(RCKS_LLDP)
     char model[32];
+    int tmp[ETHER_ADDR_LEN];
+    int i = 0;
 #endif
  
 	log_debug("localchassis", "update information for local chassis");
@@ -958,16 +960,24 @@ lldpd_update_localchassis(struct lldpd *
 	if (LOCAL_CHASSIS(cfg)->c_id == NULL) {
 		log_debug("localchassis", "no chassis ID is currently set, use chassis name");
 #if defined(RCKS_LLDP)
-        // v54: use mac address pool base as chassis id
-		if (!(LOCAL_CHASSIS(cfg)->c_id = strdup(cfg->g_config.c_cid_pattern)))
-			fatal("localchassis", NULL);
-		LOCAL_CHASSIS(cfg)->c_id_len = 18;
+#define MACSTR "%02x:%02x:%02x:%02x:%02x:%02x"
+#define STR2MAC(a) &(a)[0], &(a)[1], &(a)[2], &(a)[3], &(a)[4], &(a)[5]
+        /* v54: use mac address pool base as chassis id */
+        /* convert mac str into mac addr */
+        sscanf(cfg->g_config.c_cid_pattern, MACSTR, STR2MAC(tmp));
+
+        for (i = 0; i < ETHER_ADDR_LEN; i++)
+            LOCAL_CHASSIS(cfg)->mac[i] = (unsigned char)tmp[i];
+
+        LOCAL_CHASSIS(cfg)->c_id = LOCAL_CHASSIS(cfg)->mac; 
+		LOCAL_CHASSIS(cfg)->c_id_len = ETHER_ADDR_LEN;
+		LOCAL_CHASSIS(cfg)->c_id_subtype = LLDP_CHASSISID_SUBTYPE_LLADDR;
 #else
 		if (!(LOCAL_CHASSIS(cfg)->c_id = strdup(LOCAL_CHASSIS(cfg)->c_name)))
 			fatal("localchassis", NULL);
 		LOCAL_CHASSIS(cfg)->c_id_len = strlen(LOCAL_CHASSIS(cfg)->c_name);
-#endif
 		LOCAL_CHASSIS(cfg)->c_id_subtype = LLDP_CHASSISID_SUBTYPE_LOCAL;
+#endif
 	}
 }
 
diff -rupN lldpd-0.7.1/src/lldpd-structs.h lldpd-0.7.1-new/src/lldpd-structs.h
--- lldpd-0.7.1/src/lldpd-structs.h	2013-01-13 05:57:01.000000000 +0800
+++ lldpd-0.7.1-new/src/lldpd-structs.h	2013-03-27 16:15:19.000000000 +0800
@@ -192,7 +192,9 @@ struct lldpd_chassis {
 	char			*c_med_model;
 	char			*c_med_asset;
 #endif
-
+#if defined(RCKS_LLDP)
+    u_int8_t         mac[ETHER_ADDR_LEN];
+#endif
 };
 /* WARNING: any change to this structure should also be reflected into
    `lldpd_copy_chassis()` which is not using marshaling. */
--- lldpd-0.7.1/src/daemon/lldpd.c	2013-03-28 08:37:07.000000000 +0800
+++ lldpd-0.7.1/src/daemon/lldpd.c	2013-03-27 18:12:19.000000000 +0800
@@ -1151,6 +1151,7 @@ lldpd_main(int argc, char *argv[])
 	char *cidp = NULL;
 	char *interfaces = NULL;
 #if defined(RCKS_LLDP)
+    char model[32];
    // v54: tx interval option -g
     int interval = 0;
     // v54: time to live option -t
@@ -1418,12 +1419,15 @@ lldpd_main(int argc, char *argv[])
 	if ((lchassis = (struct lldpd_chassis*)
 		calloc(1, sizeof(struct lldpd_chassis))) == NULL)
 		fatal("localchassis", NULL);
-#if defined(RCKS_LLDP)
-	lchassis->c_cap_available = LLDP_CAP_BRIDGE | LLDP_CAP_WLAN |
-	                            LLDP_CAP_ROUTER | LLDP_CAP_DOCSIS;
-#else
+
 	lchassis->c_cap_available = LLDP_CAP_BRIDGE | LLDP_CAP_WLAN |
 	    LLDP_CAP_ROUTER;
+#if defined(RCKS_LLDP)
+    if (v54_get_model(model, sizeof(model))) {
+        if (strstr(model, "cm") || strstr(model, "CM")) {
+            lchassis->c_cap_available |= LLDP_CAP_DOCSIS;
+        }
+    }
 #endif
 	TAILQ_INIT(&lchassis->c_mgmt);
 #ifdef ENABLE_LLDPMED
--- lldpd-0.7.1/src/lib/connection.c	2013-01-13 05:57:01.000000000 +0800
+++ lldpd-0.7.1/src/lib/connection.c	2013-04-02 17:16:40.000000000 +0800
@@ -68,18 +68,32 @@ sync_recv(lldpctl_conn_t *lldpctl,
 {
 	struct lldpctl_conn_sync_t *conn = user_data;
 	size_t nb;
+#if defined(RCKS_LLDP)
+    size_t remain, offset = 0;
+#endif
 
 	if (conn->fd == -1 &&
 	    ((conn->fd = sync_connect()) == -1)) {
 		lldpctl->error = LLDPCTL_ERR_CANNOT_CONNECT;
 		return LLDPCTL_ERR_CANNOT_CONNECT;
 	}
-
+#if defined(RCKS_LLDP)
+	remain = length;
+	do {
+		if ((nb = read(conn->fd, (void*)data + offset, remain)) == -1 &&
+		    (errno == EAGAIN || errno == EINTR))
+			continue;
+		remain -= nb;
+		offset += nb;
+	} while (remain > 0 && nb > 0);
+	return offset;
+#else
 	while ((nb = read(conn->fd, (void*)data, length)) == -1) {
 		if (errno == EAGAIN || errno == EINTR) continue;
 		return LLDPCTL_ERR_CALLBACK_FAILURE;
 	}
 	return nb;
+#endif
 }
 
 
--- lldpd-0.7.1/src/daemon/lldp.c	2013-01-13 05:57:01.000000000 +0800
+++ lldpd-0.7.1/src/daemon/lldp.c	2013-04-10 14:10:43.000000000 +0800
@@ -488,6 +488,11 @@ lldp_decode(struct lldpd *cfg, char *fra
 	struct lldpd_ppvid *ppvid;
 	struct lldpd_pi *pi;
 #endif
+#if defined(RCKS_LLDP)
+#define CHASSIS_ID_SUBTYPE     1    
+#define NETWORK_ADDRESS_FAMILY 1    
+    int ipvalue;
+#endif
 	struct lldpd_mgmt *mgmt;
 	int af;
 	u_int8_t addr_str_length, addr_str_buffer[32];
@@ -568,6 +573,13 @@ lldp_decode(struct lldpd *cfg, char *fra
 				    hardware->h_ifname);
 				goto malformed;
 			}
+#if defined(RCKS_LLDP)
+            if (tlv_size > 0xFF) {
+                log_warnx("lldp", "Invlaid %d length for tlv id received on %s",
+                        tlv_size, hardware->h_ifname);
+                goto malformed;
+            }
+#endif
 			if ((b = (char *)calloc(1, tlv_size - 1)) == NULL) {
 				log_warn("lldp", "unable to allocate memory for id tlv "
 				    "received on %s",
@@ -580,6 +592,17 @@ lldp_decode(struct lldpd *cfg, char *fra
 				port->p_id = b;
 				port->p_id_len = tlv_size - 1;
 			} else {
+#if defined(RCKS_LLDP)
+                /* b[0] is the type of IP4 or IP6 address */
+                if (tlv_subtype == LLDP_CHASSISID_SUBTYPE_ADDR) {
+                    ipvalue = tlv_size - CHASSIS_ID_SUBTYPE - NETWORK_ADDRESS_FAMILY;
+                    if ((b[0] == LLDP_MGMT_ADDR_IP4 && ipvalue > 4) ||
+                        (b[0] == LLDP_MGMT_ADDR_IP6 && ipvalue <= 4)) {
+                        free(b);
+                        goto malformed;
+                    }
+                }
+#endif
 				chassis->c_id_subtype = tlv_subtype;
 				chassis->c_id = b;
 				chassis->c_id_len = tlv_size - 1;
@@ -591,7 +614,7 @@ lldp_decode(struct lldpd *cfg, char *fra
 			break;
 		case LLDP_TLV_PORT_DESCR:
 		case LLDP_TLV_SYSTEM_NAME:
-		case LLDP_TLV_SYSTEM_DESCR:
+        case LLDP_TLV_SYSTEM_DESCR:
 			if (tlv_size < 1) {
 				log_debug("lldp", "empty tlv received on %s",
 				    hardware->h_ifname);
--- lldpd-0.7.1/src/daemon/lldpd.c	2013-05-27 15:30:29.991221012 +0800
+++ lldpd-0.7.1/src/daemon/lldpd.c	2013-05-27 15:30:53.239220676 +0800
@@ -44,7 +44,9 @@
 # include <sys/param.h>
 # include <sys/sysctl.h>
 #endif
-
+#if defined(RCKS_LLDP)
+#include "crashdump.h"
+#endif
 static void		 usage(void);
 
 static struct protocol protos[] =
@@ -1296,6 +1298,9 @@ lldpd_main(int argc, char *argv[])
 	smart = filters[i].b;
 
 	log_init(debug, __progname);
+#if defined(RCKS_LLDP)
+  crashdump_init(__progname);
+#endif
 	tzset();		/* Get timezone info before chroot */
 
 	log_debug("main", "lldpd starting...");
--- lldpd-0.7.1/src/daemon/lldpd.c	2013-06-03 16:52:11.150371057 +0800
+++ lldpd-0.7.1/src/daemon/lldpd.c	2013-06-03 16:57:43.250366236 +0800
@@ -428,8 +428,12 @@ lldpd_decode(struct lldpd *cfg, char *fr
 	}
 
 	/* Do we already have the same MSAP somewhere? */
+#if defined(RCKS_LLDP)
+    int count = 1;
+#endif
 	log_debug("decode", "search for the same MSAP");
 	TAILQ_FOREACH(oport, &hardware->h_rports, p_entries) {
+#if !defined(RCKS_LLDP)
 		if ((port->p_protocol == oport->p_protocol) &&
 		    (port->p_id_subtype == oport->p_id_subtype) &&
 		    (port->p_id_len == oport->p_id_len) &&
@@ -442,7 +446,36 @@ lldpd_decode(struct lldpd *cfg, char *fr
 			log_debug("decode", "MSAP is already known");
 			break;
 		}
+#else
+        if (port->p_protocol == oport->p_protocol) {
+        count++;
+        if ((port->p_id_subtype == oport->p_id_subtype) &&
+            (port->p_id_len == oport->p_id_len) &&
+            (memcmp(port->p_id, oport->p_id, port->p_id_len) == 0) &&
+            (chassis->c_id_subtype == oport->p_chassis->c_id_subtype) &&
+            (chassis->c_id_len == oport->p_chassis->c_id_len) &&
+            (memcmp(chassis->c_id, oport->p_chassis->c_id,
+            chassis->c_id_len) == 0)) {
+            ochassis = oport->p_chassis;
+            log_debug("decode", "MSAP is already known");
+            break;
+        }
+       }
+#endif
 	}
+#if defined(RCKS_LLDP)
+    /* Do we have room for a new MSAP? */
+    if (!oport && cfg->g_config.c_max_neighbors &&
+        count > cfg->g_config.c_max_neighbors) {
+      log_info("decode",
+          "too many neighbors for port %s, drop this new one",
+          hardware->h_ifname);
+      lldpd_port_cleanup(port, 1);
+      lldpd_chassis_cleanup(chassis, 1);
+      free(port);
+      return;
+    }
+#endif
 	/* No, but do we already know the system? */
 	if (!oport) {
 		log_debug("decode", "MSAP is unknown, search for the chassis");
@@ -1407,7 +1440,9 @@ lldpd_main(int argc, char *argv[])
 	else
 #endif
 	cfg->g_config.c_tx_interval = LLDPD_TX_INTERVAL;
-
+#if defined(RCKS_LLDP)
+    cfg->g_config.c_max_neighbors = LLDPD_MAX_NEIGHBORS;
+#endif
 	/* Description */
 	if (!(cfg->g_config.c_advertise_version = advertise_version) && lsb_release)
 		/* Remove the \n */
--- lldpd-0.7.1/src/lldpd-structs.h	2013-06-03 16:52:11.150371057 +0800
+++ lldpd-0.7.1/src/lldpd-structs.h	2013-06-03 16:50:14.082372755 +0800
@@ -315,8 +315,10 @@ MARSHAL_END;
 struct lldpd_config {
 	int c_tx_interval;	/* Transmit interval */
 	int c_smart;		/* Bitmask for smart configuration (see SMART_*) */
-	int c_receiveonly;	/* Receive only mode */
-
+    int c_receiveonly;	/* Receive only mode */
+#if defined(RCKS_LLDP)
+    int c_max_neighbors; /* Maximum number of neighbors (per protocol) */
+#endif
 	char *c_mgmt_pattern;	/* Pattern to match a management address */
 	char *c_cid_pattern;	/* Pattern to match interfaces to use for chassis ID */
 	char *c_iface_pattern;	/* Pattern to match interfaces to use */
--- lldpd-0.7.1/src/daemon/lldpd.h	2013-01-13 05:57:01.000000000 +0800
+++ lldpd-0.7.1/src/daemon/lldpd.h	2013-06-03 16:54:16.134369243 +0800
@@ -65,6 +65,9 @@ struct event_base;
 #define LLDPD_TTL		120
 #define LLDPD_TX_INTERVAL	30
 #define LLDPD_TX_MSGDELAY	1
+#if defined(RCKS_LLDP)
+#define LLDPD_MAX_NEIGHBORS 64
+#endif
 #define LLDPD_PID_FILE		"/var/run/lldpd.pid"
 
 #define USING_AGENTX_SUBAGENT_MODULE 1
