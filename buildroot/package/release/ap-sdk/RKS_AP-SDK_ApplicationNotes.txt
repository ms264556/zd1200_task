##########################################################################
Copyright (C) 2010 Ruckus Wireless, Inc.  All rights reserved.

This file and content that came packaged with this file are considered
Ruckus Proprietary Information. You may not redistribute the package or
any of its content without explicit written consent from Ruckus
Wireless, Inc. 

You may not reverse engineer, disassemble, decompile, or translate the
software, or otherwise attempt to derive the source code of the
software. 

In no event shall Ruckus Wireless, Inc. or its suppliers be liable to
you for any consequential, special, incidental, or indirect damages of
any kind arising out of the delivery, performance, or use of the
software. 
##########################################################################


***********************************
* Ruckus AP SDK Application Notes *
***********************************
Version: 1.0.0.0.1
Release: Jan. 25, 2010

-----------------------------------
1. Content of AP SDK
	o. RKS_AP-SDK_ApplicationNote.txt: This document.
	o. kernel Source: rks_ap_sdk_kerenl-1.0.0.0.tgz
	o. tool Chain:    rks_ap_sdk_toolchain-1.0.0.0.tgz
	o. AP Images:     rks_ap_sdk_images-1.0.0.0.tgz

-----------------------------------
2. Development environment
	o. Setup toolchain
		x. un-tar rks_ap_sdk_toolchain-1.0.0.0.tgz to / as the following:
			tar -zxvf rcks_ap_sdk_toolchain-1.0.0.0.tgz  -C /
		x. content of toolchain
			x. binary utils:     /opt/2.6.15_gcc4.2.4/bin
			x. linker, compiler: /opt/2.6.15_gcc4.2.4/bin
			x. libraries:        /opt/2.6.15_gcc4.2.4/lib
			x. headers:          /opt/2.6.15_gcc4.2.4/include

	o. Setup TFTP server
		x. setup a tftp server.
		x. un-tar rks_ap_sdk_images-1.0.0.0.tgz to tftp server.
                   e.g., under /tftpboot/ap-sdk directory
		x. content of AP images:
			x. rcks_fw.bl7:         rootfs image
			x. vmlinux:             network boot image                      
			x. datafs.jffs2.ap-sdk: datafs image, could be ignored
                        x. sdk.rcks:            control file for first-time setup

-----------------------------------	
3. SDK version information	
	o. you can check image version by hexdump commmand:
		hexdump -C rcks_fw.bl7 |more	
		00000000  52 43 4b 53 00 0d 00 00  00 a0 6c 37 80 2b c0 00  |RCKS......l7.+..|
		00000010  00 22 cf 60 4b 5d 71 a8  7a 2b 42 c0 bc 4c 85 c2  |.".`K]q.z+B..L..|
		00000020  4b 1b 38 e9 42 46 29 7d  00 03 ee b0 31 2e 30 2e  |K.8.BF)}....1.0.|
		00000030  30 2e 30 2e 31 00 00 00  00 00 00 00 00 01 00 09  |0.0.1...........|
		00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
		*
		00000060  7a 66 37 39 34 32 00 00  00 00 00 00 31 2e 30 2e  |zf7942......1.0.|
		00000070  30 2e 30 2e 31 00 00 00  00 00 00 00 00 00 00 03  |0.0.1...........|

	o. as you can see, there has version showing that it is version
        1.0.0.0.1.

        o. on the AP, you can check the image version by
        

        # od -a /dev/mtd2 | sed -n '1,4p'
        0000000    R   C   K   S nul  cr nul nul nul  a0   l   7  80   +  c0 nul
        0000020  nul   "  bf   `   K   g  80  82  9e  e0  91   [   y  e3 sub   ;
        0000040   fa  cf   4 can   F  b8  eb   h nul etx  8b  84   1   .   0   .
        0000060    0   .   0   .   1   2   6   5   0   7   0   5 nul soh nul  ht

        mtd2 and mtd4 are image partitions.  Here's a dump of the
        partitions.
        
        # cat /proc/mtd 
        dev:    size   erasesize  name
        mtd0: 01000000 00040000 "ar7100-nor0"
        mtd1: 00040000 00040000 "RedBoot"
        mtd2: 000d0000 00040000 "rcks_wlan.main"
        mtd3: 00630000 00040000 "v54_$rootfs$_1"
        mtd4: 00700000 00040000 "rcks_wlan.bkup"
        mtd5: 00140000 00040000 "datafs"
        mtd6: 0003f000 00040000 "FIS directory"
        mtd7: 00001000 00040000 "RedBoot config"
        mtd8: 00040000 00040000 "Board Data"


-----------------------------------
4. Connect to Ruckus AP
	o. AP default Setting:
		x. default IP:      192.168.0.1/24
		x. default ESSID:   Ruckus
		x. default channel: 11
		x. auth mode: Open system
	o. connecting to AP by eth cable or wireless card.
        o. factory units : follow steps in 5: First Time Setup 
	o. to connect to the AP running SDK firmware, use telnet command
           as this example. 
		> telnet 192.168.0.1
		Trying 192.168.0.1...
		Connected to 192.168.0.1 (192.168.0.1).
		Escape character is '^]'.

		BusyBox v1.01 (2010.01.25-09:38+0000) Built-in shell (ash)
		Enter 'help' for a list of built-in commands.
		
		#
         o. check the /etc/init.d/rcS scripts to see how the interfaces are brought up.

         wifi0 maps to 2.4 GHz 11ng radio
         wifi1 maps to 5 GHz 11na radio

         - Note: By default, the AP honors DFS requirements and it will
         take about 1 minute for the 5GHz radio to come up after
         a channel change.

         o. After AP boots, manually run:
           a) apup.sh or staup.sh to configure a AP/STA interface
           b) assoc.sh to associate to an AP (for STA only)"

           You may script these into /writable/etc/rc.local.
           Ensure rc.local has excutable permission (chmod 777)
           Everything saved under /writable is saved in flash.  

           AP /writable/etc/rc.local e.g.,
           ifconfig br0 192.168.0.1
           /sbin/apup.sh wifi0 wlan0 Ruckus 1
           
           STA /writable/etc/rc.local e.g.,
           ifconfig br0 192.168.0.2 # configure alternate IP
           /sbin/staup.sh wifi0 wlan0
           /sbin/assoc.sh wlan0 Ruckus 00:11:22:33:44:55

           HINT: there is a vi editor included in the image.
           HINT: beware that the MAC address can be slightly different
                 when an interface (e.g. wlan0) is instantiated on
                 different radio (wifi).  So check the bssid parameter
                 in assoc.sh carefully when you switch client to connect 
                 between different radios, etc.
           
               
-----------------------------------	
5. First Time Setup
        o. verify the configurations in sdk.rcks (the firmware control
           file) is correct.
           - file size needs to match rcks_fw.bl7
           - correct tftp path
        o. ssh 192.168.0.1 
        o. user: super pass: sp-admin
        o. set up the AP to find the tftp server:

        rkscli: fw set proto tftp
        rkscli: fw set host 100.1.0.2
        rkscli: fw set control ap-sdk/sdk.rcks
        rkscli: fw show  

current primary boot image is Image1
--------------------------------------------------------------
Auto F/W upgrade                          = disabled
Running on image                          = Image1
FW Control Control File                   = ap-sdk/sdk.rcks
Control File Server                       = 100.1.0.2
Protocol                                  = TFTP
Port                                      = auto
Boot Flags (Main,Backup,Factory,Reset)    = M. ..  [MB FR]
--------------------------------------------------------------
OK

        rkscli: fw update

fw: Updating rcks_wlan.bkup ...
_erase_flash: offset=0x0 count=9
Erase Total 9 Units
Performing Flash Erase of length 262144 at offset 0x200000 done
...............................................................................................................................................................

        rkscli: reboot

        o. The AP will reboot into SDK firmware.
        o. Proceed to Step 6 below.  The AP contains two firmware
        partitions on the flash.  You need to perform update one more
        time to ensure the second partition also gets flashed with the
        SDK firmware.  The secondary partition is used for backup. In
        case the main image gets corrupted, the AP should boot into the
        secondary image.

	
-----------------------------------
6. Image upgrade (always use this after the AP has gone through First Time Setup):
	o. type fw_upgrade.sh to get helps
		fw_upgrade.sh <protocol>://<server ip>/<path/image>
	o. to upgarde your AP image, giving fw_upgrade.sh parameters as following example:
		# fw_upgrade.sh tftp://192.168.0.2/ap-sdk/rcks_fw.bl7
		**************************
		* starting image upgrade *
		**************************
		--->downloading [ap-sdk/rcks_fw.bl7]...
		--->upgrading [/dev/mtd4]...
		Erasing blocks: 9/9 (100%)
		Writing data: 2228k/2228k (100%)
		Verifying data: 2228k/2228k (100%)
		bdSave: sizeof(bd)=0x7c, sizeof(rbd)=0xd0
		  caching flash data from /dev/mtd8 [ 0x00000000 - 0x00010000 ]
		  updating flash data [0x00008000 - 0x000080d0] from [0x004115bc - 0x0041168c]
		_erase_flash: offset=0x0 count=1
		Erase Total 1 Units
		Performing Flash Erase of length 262144 at offset 0x0 done
		  caching flash data from /dev/mtd8 [ 0x00000000 - 0x00010000 ]
		  verifying flash data [0x00008000 - 0x000080d0] from [0x004115bc - 0x0041168c]
		# System Shutdown ...
		The system is going down NOW !!
		Sending SIGTERM to all processes.
		Please stand by while rebooting the system.
		*** Hardware Watchdog stopped ***
		*** soft watchdog stopped ***
		Restarting system.
	
-----------------------------------
7. Network boot
	o. you need a tftp server and put vmlinux image in it.
	o. type net_boot.sh to get helps:
		net_boot.sh <host ip> <server ip>/<path/image>
	o. to boot up from network, type net_boot.sh as example following:
		# net_boot.sh 192.168.0.1 192.168.0.2/ap-sdk/vmlinux
		*******************************
		* set network boot parameters *
		*******************************
		--->host ip:   [192.168.0.1]
		--->server ip: [192.168.0.2]
		--->image:     [ap-sdk/vmlinux]
		please reboots to take effect
		-------------------------------
	o. verify paramters, then type 'reboot' to take effect.
        o. This is a one-time only command.  Must re-run the command to
           network boot the next time.
           - Power cycling without running this command will cause the
           AP to load/run the image from the flash.
           - We highly recommend that you develop using network boot and
           verify the image (especially look for any bugs that may cause a
           reboot) before flashing it onto the AP.
	
-----------------------------------
8. Build Environment
	o. The SDK directory has the following file structure:
		1.0.0.1--RKS_AP-SDK_ApplicationNotes.txt 
		        -rks_ap_sdk_kerenl-1.0.0.1.tgz    //kernel source
		        -rks_ap_sdk_toolchain-1.0.0.1.tgz //toolchain
		        -rks_ap_sdk_images-1.0.0.0.tgz    //pre-build images
		        -rks_ap_sdk_prebuild-1.0.0.1.tgz  //pre-build binaries
		Build  --config.in                        //Build configurations
		        -Makefile                         //Makefile
		config --dev_table.txt
		        -fakeroot.env
		        -kernel-config                    //kernel configuration
	o. There is a config.in for you to setup build environemnt.
	o. For example change project name, version, build...etc.
		#over all project parameters
		PROJECT         = ap-sdk
		PROJECT_VERSION = 1.0.0.0
		PROJECT_BUILD   = 2

		#project directories
		PROJECT_ROOT    = ${shell pwd}/../
		PACKAGE_DIR     = ${PROJECT_ROOT}/1.0.0.0.1/
		WORKING_DIR     = ${PROJECT_ROOT}/temp
		OUTPUT_DIR      = ${PROJECT_ROOT}/${PROJECT}
		KERNEL_SRC      = ${WORKING_DIR}/kernel
		TOOLCHAIN_DIR   = ${WORKING_DIR}/toolchain
		ROOTFS_DIR      = ${WORKING_DIR}/rootfs
		ROOTFS_NAME     = ramdisk.img
		AP_FLASH_IMG    = rcks_fw.bl7
		NET_BOOT_IMG    = vmlinux

		#package name
		TOOLCHAIN_PACKAGE       = ${PACKAGE_DIR}/rks_ap_sdk_toolchain-1.0.0.1.tgz
		KERNEL_PACKAGE          = ${PACKAGE_DIR}/rks_ap_sdk_kerenl-1.0.0.1.tgz
		PREBUILD_PACKAGE        = ${PACKAGE_DIR}/rks_ap_sdk_prebuild-1.0.0.1.tgz

		KERNE_CONFIG    = ${PROJECT_ROOT}/config/kernel-config
		DEV_TABLE       = ${PROJECT_ROOT}/config/dev_table.txt
		FAKEROOT_ENV    = ${PROJECT_ROOT}/config/fakeroot.env

		#compile options
		ARCH            = mips
		TARGET          = ${ARCH}-linux
		HOST            := i686-linux
		PREFIX          = ${TOOLCHAIN_DIR}
		TARGET_PREFIX   = ${PREFIX}/${TARGET}
		PATH            :=
			${PREFIX}/bin/:${PREFIX}/usr/bin:${PREFIX}/lib:${PREFIX}/usr/lib:${PATH}
		CROSS_COMPILE   = ${TARGET}-
		AS              = ${CROSS_COMPILE}as
		AR              = ${CROSS_COMPILE}ar
		CC              = ${CROSS_COMPILE}gcc
		CPP             = ${CROSS_COMPILE}gcc -E
		LD              = ${CROSS_COMPILE}ld
		NM              = ${CROSS_COMPILE}nm
		OBJCOPY         = ${CROSS_COMPILE}objcopy
		OBJDUMP         = ${CROSS_COMPILE}objdump
		RANLIB          = ${CROSS_COMPILE}ranlib
		READELF         = ${CROSS_COMPILE}readelf
		SIZE            = ${CROSS_COMPILE}size
		STRINGS         = ${CROSS_COMPILE}strings
		STRIP           = ${CROSS_COMPILE}strip
		LZMA            = ${PREFIX}/bin/lzma
		BINMD5          = ${PREFIX}/bin/binmd5
		FAKEROOT_LIB    = ${PREFIX}/usr/lib/libfakeroot.so
		FAKEROOT_BIN    = ${PREFIX}/usr/bin/faked
	o. Type "make help" to see supported build command:
		Usages:
		        Build all:              make all
        		Set environment:        make environment
        		Build kernel:           make build_kernel build_modules
        		Build rootfs:           make build_rootfs
        		Build images:           make build_images
        		Check parameters:       make info
        o. Type "make all".  The resulting images will be in
           temp/kernel.  Copy this to your tftp server directory
	   for fw_upgrade or network boot.
